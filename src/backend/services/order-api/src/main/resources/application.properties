quarkus.hibernate-orm.database.generation=drop-and-create
quarkus.swagger-ui.always-include=true
quarkus.package.type=uber-jar
quarkus.http.port=8080
quarkus.log.console.json=true

quarkus.application.name=order-api
quarkus.opentelemetry.enabled=false
quarkus.opentelemetry.tracer.exporter.otlp.endpoint=http://localhost:4317

quarkus.grpc.clients.paymentservice.host=localhost
quarkus.grpc.clients.paymentservice.port=8083

mp.messaging.incoming.checkout.connector=smallrye-kafka
mp.messaging.incoming.checkout.topic=checkout
mp.messaging.incoming.checkout.value.deserializer=org.jurabek.restaurant.order.api.events.UserCheckoutDeserializer
mp.messaging.incoming.checkout.interceptor.classes=io.opentracing.contrib.kafka.TracingConsumerInterceptor

quarkus.datasource.db-kind=h2
quarkus.datasource.jdbc.max-size=13
quarkus.datasource.username=username-default
quarkus.datasource.jdbc.url=jdbc:h2:mem:default

# local docker 
%local.quarkus.datasource.db-kind=postgresql
%local.quarkus.datasource.jdbc.max-size=10
%local.quarkus.http.root-path=/order
%local.quarkus.http.non-application-root-path=/order
%local.kafka.bootstrap.servers=kafka:9092
%local.quarkus.grpc.clients.payment.host=localhost
%local.quarkus.log.console.json=true
%local.quarkus.opentelemetry.enabled=true
%local.quarkus.datasource.jdbc.driver=io.opentelemetry.instrumentation.jdbc.OpenTelemetryDriver

# prod
%prod.quarkus.datasource.db-kind=postgresql
%prod.quarkus.http.root-path=/order
%prod.kafka.bootstrap.servers=kafka:9092
%prod.quarkus.log.console.json=true
%prod.quarkus.opentelemetry.enabled=true

